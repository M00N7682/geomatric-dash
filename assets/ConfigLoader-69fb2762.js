var c=Object.defineProperty;var p=(s,e,t)=>e in s?c(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var l=(s,e,t)=>(p(s,typeof e!="symbol"?e+"":e,t),t);class r{static async loadGameConfig(){try{const e=await fetch("/src/config/gameConfig.json");if(!e.ok)throw new Error(`Failed to load config: ${e.status}`);const t=await e.json(),i=this.validateGameConfig(t);return console.log("‚úÖ Game config loaded successfully"),i}catch(e){return console.warn("‚ö†Ô∏è Failed to load game config, using defaults:",e),this.DEFAULT_CONFIG}}static async loadPatterns(){try{const e=await fetch("/src/config/patterns.json");if(!e.ok)throw new Error(`Failed to load patterns: ${e.status}`);const t=await e.json(),i=this.validatePatterns(t);return console.log(`‚úÖ Patterns loaded successfully (${Object.keys(i).length} patterns)`),i}catch(e){return console.warn("‚ö†Ô∏è Failed to load patterns, using defaults:",e),this.DEFAULT_PATTERNS}}static validateGameConfig(e){const t={...this.DEFAULT_CONFIG};try{if(e.game&&typeof e.game=="object"&&Object.assign(t.game,this.validateNumericFields(e.game,t.game)),e.player&&typeof e.player=="object"&&(e.player.hitbox&&Object.assign(t.player.hitbox,this.validateNumericFields(e.player.hitbox,t.player.hitbox)),e.player.jump&&Object.assign(t.player.jump,this.validateNumericFields(e.player.jump,t.player.jump))),e.powerups&&typeof e.powerups=="object")for(const[i,a]of Object.entries(e.powerups))t.powerups[i]&&typeof a=="object"&&Object.assign(t.powerups[i],this.validateMixedFields(a,t.powerups[i]));e.spawn&&typeof e.spawn=="object"&&(e.spawn.patternIntervalSec&&Object.assign(t.spawn.patternIntervalSec,this.validateNumericFields(e.spawn.patternIntervalSec,t.spawn.patternIntervalSec)),e.spawn.spikeWindow&&Object.assign(t.spawn.spikeWindow,this.validateNumericFields(e.spawn.spikeWindow,t.spawn.spikeWindow)),Array.isArray(e.spawn.weightsTimeline)&&(t.spawn.weightsTimeline=e.spawn.weightsTimeline.filter(this.isValidWeightEntry))),e.adaptive&&typeof e.adaptive=="object"&&(Object.assign(t.adaptive,this.validateNumericFields(e.adaptive,t.adaptive)),e.adaptive.easeUp&&Object.assign(t.adaptive.easeUp,this.validateNumericFields(e.adaptive.easeUp,t.adaptive.easeUp)),e.adaptive.spiceUp&&Object.assign(t.adaptive.spiceUp,this.validateNumericFields(e.adaptive.spiceUp,t.adaptive.spiceUp)))}catch(i){console.warn("‚ö†Ô∏è Config validation error, using defaults for affected fields:",i)}return t}static validatePatterns(e){if(!e||typeof e!="object")return console.warn("‚ö†Ô∏è Invalid patterns format, using defaults"),this.DEFAULT_PATTERNS;const t={};let i=0;for(const[a,n]of Object.entries(e))Array.isArray(n)&&n.every(this.isValidPatternEntry)?(t[a]=n,i++):console.warn(`‚ö†Ô∏è Invalid pattern: ${a}`);return i===0?(console.warn("‚ö†Ô∏è No valid patterns found, using defaults"),this.DEFAULT_PATTERNS):t}static validateNumericFields(e,t){const i={...t};for(const[a,n]of Object.entries(t))typeof n=="number"&&typeof e[a]=="number"&&!isNaN(e[a])&&(i[a]=e[a]);return i}static validateMixedFields(e,t){const i={...t};for(const[a,n]of Object.entries(t)){const o=e[a];typeof n==typeof o&&(typeof n=="number"&&!isNaN(o)||typeof n=="boolean")&&(i[a]=o)}return i}static isValidWeightEntry(e){return e&&typeof e.untilSec=="number"&&typeof e.easy=="number"&&typeof e.mid=="number"&&typeof e.hard=="number"&&Math.abs(e.easy+e.mid+e.hard-1)<.01}static isValidPatternEntry(e){return e&&typeof e.type=="string"&&typeof e.x=="number"&&e.type.length>0}}l(r,"DEFAULT_CONFIG",{game:{tickRate:60,gravity:2200,baseSpeed:320,speedGainPerSec:6,maxSpeed:640},player:{hitbox:{w:28,h:42},jump:{vy0:-720,airControl:.15}},score:{distanceUnit:1,coin:10,comboMultiplierPerTier:.2,graceOnBuff:.2},powerups:{shield:{duration:8,keepCombo:!0},dash:{duration:2,speedBoost:1.5,invincible:!0,breakObstacles:!0},magnet:{radius:180,duration:6},timewarp:{duration:3,timeScale:.5},doublejump:{duration:10,charges:1,refreshOnLand:!0},giant:{duration:4,scale:1.5,lowObstaclesIgnore:!0}},spawn:{patternIntervalSec:{start:2.6,end:2.2,untilSec:150,min:2},weightsTimeline:[{untilSec:90,easy:.65,mid:.3,hard:.05},{untilSec:180,easy:.45,mid:.4,hard:.15},{untilSec:9999,easy:.3,mid:.45,hard:.25}],spikeWindow:{everySec:40,durationSec:5,hardBonus:.15,hardCap:.6,recoveryEasyBonus:.1,recoverySec:10}},adaptive:{recentHitWindowSec:20,hitThreshold:2,postHitDurationSec:15,easeUp:{hard:-.1,easy:.1},comboWindowSec:30,postComboDurationSec:10,spiceUp:{hard:.08,coinBonusPct:10}}}),l(r,"DEFAULT_PATTERNS",{easy_001:[{type:"ground",x:0,w:8},{type:"coin_arc",x:3,y:-2,n:5}]});let d,u;async function g(){const[s,e]=await Promise.all([r.loadGameConfig(),r.loadPatterns()]);globalThis.gameConfig=s,globalThis.patterns=e,d=s,u=e,console.log("üéÆ Global configuration initialized")}export{r as ConfigLoader,d as gameConfig,g as initializeConfig,u as patterns};
